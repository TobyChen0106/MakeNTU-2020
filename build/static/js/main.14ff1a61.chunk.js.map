{"version":3,"sources":["components/IOSSwitch.js","containers/Router.js","App.js","serviceWorker.js","index.js","assets/images/cardbo-logo.png"],"names":["IOSSwitch","withStyles","theme","root","width","height","padding","margin","spacing","switchBase","transform","color","palette","common","white","backgroundColor","opacity","border","thumb","track","borderRadius","grey","transition","transitions","create","checked","focusVisible","classes","props","Switch","focusVisibleClassName","disableRipple","IOSSwitchGen","FormGroup","FormControlLabel","control","onChange","handleChange","label","Router","componentWillMount","handleChangeMode","e","setState","mode","target","value","data","fetch","body","JSON","stringify","headers","method","then","res","json","handleChangeMonitor","liveTvStatus","state","handleClickOpenDoor","loading","page","time","Date","this","className","loadingBubbles","type","loadingImageHolder","loadingImage","src","cardbo_logo","alt","pageContent","Card","appCard","FormControl","component","FormLabel","RadioGroup","aria-label","name","Radio","modeSelect","IconButton","openDoorButton","onClick","openDoorButtonIcon","monitor","getPageContent","BottomNavigation","navigation","event","newValue","showLabels","BottomNavigationAction","icon","Component","withAlert","overflow","maxHeight","maxWidth","position","bottom","display","justifyContent","alignItems","marginBottom","flexDirection","top","left","zIndex","options","timeout","positions","MIDDLE","alertStyle","wordWrap","addCardTemplate","message","style","close","App","template","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.14ff1a61.chunk.js","sourcesContent":["import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nconst IOSSwitch = withStyles((theme) => ({\n  root: {\n    width: 42,\n    height: 26,\n    padding: 0,\n    margin: theme.spacing(1),\n  },\n  switchBase: {\n    padding: 1,\n    '&$checked': {\n      transform: 'translateX(16px)',\n      color: theme.palette.common.white,\n      '& + $track': {\n        backgroundColor: '#52d869',\n        opacity: 1,\n        border: 'none',\n      },\n    },\n    '&$focusVisible $thumb': {\n      color: '#52d869',\n      border: '6px solid #fff',\n    },\n  },\n  thumb: {\n    width: 24,\n    height: 24,\n  },\n  track: {\n    borderRadius: 26 / 2,\n    border: `1px solid ${theme.palette.grey[400]}`,\n    backgroundColor: theme.palette.grey[50],\n    opacity: 1,\n    transition: theme.transitions.create(['background-color', 'border']),\n  },\n  checked: {},\n  focusVisible: {},\n}))(({ classes, ...props }) => {\n  return (\n    <Switch\n      focusVisibleClassName={classes.focusVisible}\n      disableRipple\n      classes={{\n        root: classes.root,\n        switchBase: classes.switchBase,\n        thumb: classes.thumb,\n        track: classes.track,\n        checked: classes.checked,\n      }}\n      {...props}\n    />\n  );\n});\n\nexport default function IOSSwitchGen(props) {\n  return (\n    <FormGroup>\n      <FormControlLabel\n        control={<IOSSwitch checked={props.checked} onChange={props.handleChange} />}\n        label={props.label}\n      />\n    </FormGroup>\n  );\n}","import React, { Component, useHistory } from 'react';\n//images\nimport cardbo_logo from '../assets/images/cardbo-logo.png'\nimport ReactLoading from 'react-loading';\n\n// material ui\nimport { withStyles } from '@material-ui/core/styles';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport IconButton from '@material-ui/core/IconButton';\nimport MeetingRoomIcon from '@material-ui/icons/MeetingRoom';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\nimport PeopleIcon from '@material-ui/icons/People';\nimport Card from '@material-ui/core/Card';\n\nimport { Route } from \"react-router-dom\";\nimport Switch from 'react-router-transition-switch';\nimport Fader from 'react-fader';\nimport Clock from 'react-clock';\nimport { withAlert } from \"react-alert\";\nimport axios from 'axios';\n\n//componets\nimport IOSSwitch from '../components/IOSSwitch'\n\n\nconst useStyles = () => ({\n    root: {\n        overflow: \"hidden\",\n        maxHeight: \"100vh\",\n        maxWidth: \"100vw\",\n    },\n    navigation: {\n        width: \"100vw\",\n        position: \"absolute\",\n        bottom: 0,\n\n    },\n    pageContent: {\n        width: \"100vw\",\n        height: \"100vh\",\n        backgroundColor: \"#097ac5\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    appCard: {\n        width: \"90vw\",\n        height: \"80vh\",\n        marginBottom: \"56px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-around\",\n        alignItems: \"center\",\n    },\n    monitor: {\n        width: \"80vw\",\n        border: \"solid 5px \",\n        borderRadius: \"5vw\",\n    },\n    modeSelect: {\n        color: \"#097ac5\",\n        '&$checked': {\n            color: \"#097ac5\",\n        },\n    },\n    openDoorButton: {\n        width: \"40vw\",\n        height: \"40vw\",\n        backgroundColor: \"#097ac5\",\n        '&:hover': {\n            backgroundColor: '#097ac5',\n        },\n        '&:active': {\n            backgroundColor: '#097ac5',\n        },\n        color: \"#fff\"\n    },\n    openDoorButtonIcon: {\n        width: \"30vw\",\n        height: \"30vw\",\n    },\n    loading: {\n        width: \"100vw\",\n        height: \"100vh\",\n        backgroundColor: \"#097ac5\",\n        position: \"absolute\",\n    },\n    loadingImageHolder: {\n        width: \"45vw\",\n        height: \"45vw\",\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        zIndex: 100\n    },\n    loadingImage: {\n        width: \"100%\",\n        height: \"100%\",\n        zIndex: 101\n    },\n    loadingBubbles: {\n        width: \"50vw\",\n        height: \"50vw\",\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n    },\n});\n\nclass Router extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            page: 0,\n            time: new Date(),\n            liveTvStatus: false,\n            mode: \"off\",\n        };\n    }\n\n    componentWillMount = () => {\n    }\n\n    handleChangeMode = (e) => {\n        // 設定模式 (\"off\" or \"unlock\" or \"lock\")\n        this.setState({ mode: e.target.value });\n        let data = {'mode': e.target.value}\n        fetch('/change_mode', {\n            body: JSON.stringify(data),\n            headers:{\n                'content-type': 'application/json'\n            },\n            method: 'POST'\n        })\n        .then(res => res.json())\n    }\n\n    handleChangeMonitor = () => {\n        // 開啟/關閉監控\n        this.setState({ liveTvStatus: !this.state.liveTvStatus })\n    }\n\n    handleClickOpenDoor = () => {\n        // 遠端開門\n        fetch('/open_door')\n        .then(res=>res.json())\n    }\n    render() {\n        const { classes } = this.props;\n        if (this.state.loading) {\n            return (\n                <div className={classes.loading}>\n                    <div className={classes.loadingBubbles}>\n                        <ReactLoading type={'spin'} color={'#fff'} height={'50vh'} width={'50vw'} />\n                    </div>\n                    <div className={classes.loadingImageHolder}>\n                        <img className={classes.loadingImage} src={cardbo_logo} alt=\"\" />\n                    </div>\n                </div>)\n        }\n        else {\n            const getPageContent = (page = this.state.page) => {\n                switch (page) {\n                    case 0:\n                        return (<div>\n                            <Card className={classes.appCard}>\n                                <FormControl component=\"fieldset\" >\n                                    <FormLabel component=\"legend\">設定模式</FormLabel>\n                                    <RadioGroup aria-label=\"gender\" name=\"gender1\" value={this.state.mode} onChange={this.handleChangeMode}>\n                                        <FormControlLabel value=\"off\" control={<Radio className={classes.modeSelect} color=\"default\" />} label=\"斷電模式\" />\n                                        <FormControlLabel value=\"unlock\" control={<Radio className={classes.modeSelect} color=\"default\" />} label=\"無門禁模式\" />\n                                        <FormControlLabel value=\"lock\" control={<Radio className={classes.modeSelect} color=\"default\" />} label=\"門禁模式\" />\n                                    </RadioGroup>\n                                </FormControl>\n                                <IconButton aria-label=\"open door\" className={classes.openDoorButton} onClick={this.handleClickOpenDoor}>\n                                    <MeetingRoomIcon className={classes.openDoorButtonIcon} />\n                                </IconButton>\n                            </Card>\n                        </div>)\n                    case 1:\n                        return (<Card className={classes.appCard}>\n                            <img src={this.state.liveTvStatus ? \"/get_img\" : \"https://converus.com/english/wp-content/uploads/2016/10/Blue-Eye-Picture-RGB-new-crosshairs-400px-cropped-low-res-300x205.jpg\"} className={classes.monitor} />\n                            <IOSSwitch\n                                label=\"開啟監控功能\"\n                                checked={this.state.liveTvStatus}\n                                handleChange={this.handleChangeMonitor}\n                            />\n                        </Card>)\n                    case 2:\n                        return (<div>\n                            管制\n                        </div>)\n                }\n            };\n            return (\n                <div>\n                    <div className={classes.pageContent}>\n                        {/* <Fader> */}\n                        {getPageContent()}\n                        {/* </Fader> */}\n                    </div>\n                    <BottomNavigation\n                        className={classes.navigation}\n                        value={this.state.page}\n                        onChange={(event, newValue) => {\n                            this.setState({ page: newValue });\n                        }}\n                        showLabels\n                    >\n                        <BottomNavigationAction label=\"設定\" icon={<SettingsIcon />} />\n                        <BottomNavigationAction label=\"即時監控\" icon={<LiveTvIcon />} />\n                        <BottomNavigationAction label=\"門禁管理\" icon={<PeopleIcon />} />\n                    </BottomNavigation>\n                </div>\n            );\n        }\n    }\n}\nexport default withAlert()(withStyles(useStyles)(Router));","import React, { Component } from 'react';\nimport './App.css';\nimport Router from './containers/Router';\n\nimport { BrowserRouter } from \"react-router-dom\";\nimport { positions, Provider } from \"react-alert\";\n\nconst options = {\n  timeout: 1500,\n  position: positions.MIDDLE\n};\n\nconst alertStyle = {\n  opacity: \"0.8\",\n  backgroundColor: '#000',\n  color: 'white',\n  wordWrap: \"break-word\",\n  width: '40vw',\n  padding: '6vw',\n  borderRadius: '6vw',\n  display: 'flex',\n  flexDirection: \"column\",\n  justifyContent: 'center',\n  alignItems: 'center',\n}\n\nconst addCardTemplate = ({ message, options, style, close }) => {\n  return (\n    <div style={{ ...alertStyle, ...style }} onClick={close}>\n      <span style={{ marginBottom: \"2vw\" }}>{options.type === 'success' ? `成功加入` : `成功移除`}</span>\n      <span >{message}</span>\n    </div>\n  )\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <BrowserRouter>\n        <Provider template={addCardTemplate} {...options}>\n          <Router />\n        </Provider>\n      </BrowserRouter>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cardbo-logo.f52da132.png\";"],"sourceRoot":""}